#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<thread>
#include<unistd.h>
#include<errno.h>
#include<sys/mman.h>
//aurora{debug_debug_and_more_debug_qoa31685v7aq13g_}
// bool encrypt_function(const char *target)
// {
//     unsigned char enc_flag[] = {0x88,0x9c,0x97,0x92,0x97,0x88,0x9e,0x8d,0x8c,0x87,0x9c,0x8a,0xc2,0x8d,0x8c,0x87,0x9c,0x8a,0xc2,0x88,0x93,0x8d,0xc2,0x94,0x92,0x97,0x8c,0xc2,0x8d,0x8c,0x87,0x9c,0x8a,0xc2,0x98,0x92,0x88,0xd6,0xd8,0xdb,0xe1,0xdc,0x9b,0xda,0x88,0x98,0xd8,0xd6,0x8a,0xc2,0xa4};
//     unsigned char tar[0x50];
//     for(int i = 0 ;i < 0x50 ;++i){
//         tar[i] = 0;
//     }
//     for(int i = 0 ;i < 0x50 ;++i){
//         tar[i] = target[i];
//     }
//     for (int i = 0; i < sizeof(enc_flag); ++i){
//         tar[i] ^= 0x63;
//         tar[i] -= 0xaa;
//         tar[i] += 0x30;
//         if(tar[i] != enc_flag[i]){
//             return false;
//         }
//     }
//     return true;
// }
unsigned char encrypt_func[] = {0xaa,0xb7,0x76,0x1a,0xb7,0x7e,0x13,0x3f,0xff,0xff,0xff,0xb7,0x76,0x42,0xb7,0x0,0x0,0x0,0x9b,0xb7,0x74,0xfb,0xda,0xd7,0xff,0xff,0xff,0xb7,0x76,0xba,0x7,0xce,0x3f,0x39,0x7a,0x9f,0x0,0x0,0x0,0x77,0x39,0x7a,0x9e,0x0,0x0,0x0,0x63,0x39,0x7a,0x9d,0x0,0x0,0x0,0x68,0x39,0x7a,0x9c,0x0,0x0,0x0,0x6d,0x39,0x7a,0x9b,0x0,0x0,0x0,0x68,0x39,0x7a,0x9a,0x0,0x0,0x0,0x77,0x39,0x7a,0x99,0x0,0x0,0x0,0x61,0x39,0x7a,0x98,0x0,0x0,0x0,0x72,0x39,0x7a,0x97,0x0,0x0,0x0,0x73,0x39,0x7a,0x96,0x0,0x0,0x0,0x78,0x39,0x7a,0x95,0x0,0x0,0x0,0x63,0x39,0x7a,0x94,0x0,0x0,0x0,0x75,0x39,0x7a,0x93,0x0,0x0,0x0,0x3d,0x39,0x7a,0x92,0x0,0x0,0x0,0x72,0x39,0x7a,0x91,0x0,0x0,0x0,0x73,0x39,0x7a,0x90,0x0,0x0,0x0,0x78,0x39,0x7a,0x8f,0x0,0x0,0x0,0x63,0x39,0x7a,0x8e,0x0,0x0,0x0,0x75,0x39,0x7a,0x8d,0x0,0x0,0x0,0x3d,0x39,0x7a,0x8c,0x0,0x0,0x0,0x77,0x39,0x7a,0x8b,0x0,0x0,0x0,0x6c,0x39,0x7a,0x8a,0x0,0x0,0x0,0x72,0x39,0x7a,0x89,0x0,0x0,0x0,0x3d,0x39,0x7a,0x88,0x0,0x0,0x0,0x6b,0x39,0x7a,0x87,0x0,0x0,0x0,0x6d,0x39,0x7a,0x86,0x0,0x0,0x0,0x68,0x39,0x7a,0x85,0x0,0x0,0x0,0x73,0x39,0x7a,0x84,0x0,0x0,0x0,0x3d,0x39,0x7a,0x83,0x0,0x0,0x0,0x72,0x39,0x7a,0x82,0x0,0x0,0x0,0x73,0x39,0x7a,0x81,0x0,0x0,0x0,0x78,0x39,0x7a,0x80,0x0,0x0,0x0,0x63,0x39,0xba,0x7f,0x75,0x39,0xba,0x7e,0x3d,0x39,0xba,0x7d,0x67,0x39,0xba,0x7c,0x6d,0x39,0xba,0x7b,0x77,0x39,0xba,0x7a,0x29,0x39,0xba,0x79,0x27,0x39,0xba,0x78,0x24,0x39,0xba,0x77,0x1e,0x39,0xba,0x76,0x23,0x39,0xba,0x75,0x64,0x39,0xba,0x74,0x25,0x39,0xba,0x73,0x77,0x39,0xba,0x72,0x67,0x39,0xba,0x71,0x27,0x39,0xba,0x70,0x29,0x39,0xba,0x6f,0x75,0x39,0xba,0x6e,0x3d,0x39,0xba,0x6d,0x5b,0x38,0x7a,0xab,0x0,0x0,0x0,0xff,0xff,0xff,0xff,0x7c,0x42,0xab,0x0,0x0,0x0,0xb0,0x80,0xe9,0x74,0x7a,0xab,0x0,0x0,0x0,0xb7,0x67,0x39,0xbb,0xfa,0x5f,0xff,0x7c,0x7a,0xab,0x0,0x0,0x0,0xfe,0x14,0x1e,0x38,0x7a,0xa7,0x0,0x0,0x0,0xff,0xff,0xff,0xff,0x7c,0x42,0xa7,0x0,0x0,0x0,0xb0,0x80,0xd2,0x74,0x7a,0xa7,0x0,0x0,0x0,0xb7,0x9c,0x2f,0xb7,0x74,0x7a,0xb7,0x0,0x0,0x0,0xb7,0xfe,0x2f,0xf0,0x49,0xff,0x76,0x3d,0x74,0x7a,0xa7,0x0,0x0,0x0,0xb7,0x67,0x77,0xab,0xfa,0x5f,0x7c,0x7a,0xa7,0x0,0x0,0x0,0xfe,0x14,0x35,0x38,0x7a,0xa3,0x0,0x0,0x0,0xff,0xff,0xff,0xff,0x74,0x7a,0xa3,0x0,0x0,0x0,0xb7,0x67,0xb7,0x7c,0x7,0xcd,0xf0,0x78,0x75,0xff,0xff,0xff,0x74,0x7a,0xa3,0x0,0x0,0x0,0xb7,0x67,0xf0,0x49,0xbb,0xfa,0x5f,0x7c,0xf,0x9c,0x76,0x3d,0x74,0x7a,0xa3,0x0,0x0,0x0,0xb7,0x67,0x77,0xab,0xfa,0x5f,0x74,0x7a,0xa3,0x0,0x0,0x0,0xb7,0x67,0xf0,0x49,0xbb,0xfa,0x5f,0x72,0xaf,0xa9,0x74,0x7a,0xa3,0x0,0x0,0x0,0xb7,0x67,0x77,0xab,0xfa,0x5f,0x74,0x7a,0xa3,0x0,0x0,0x0,0xb7,0x67,0xf0,0x49,0xbb,0xfa,0x5f,0x72,0xaf,0xcf,0x74,0x7a,0xa3,0x0,0x0,0x0,0xb7,0x67,0x77,0xab,0xfa,0x5f,0x74,0x7a,0xa3,0x0,0x0,0x0,0xb7,0x67,0xf0,0x49,0xab,0xfa,0x5f,0x74,0x7a,0xa3,0x0,0x0,0x0,0xb7,0x67,0xf0,0x49,0x7b,0xfa,0x9f,0x0,0x0,0x0,0xc7,0x3d,0x8b,0xf8,0x47,0xff,0xff,0xff,0xff,0x14,0xee,0x7c,0x7a,0xa3,0x0,0x0,0x0,0xfe,0x16,0x9b,0x0,0x0,0x0,0x47,0xfe,0xff,0xff,0xff,0xb7,0x74,0xb2,0x7,0x9b,0xb7,0xcc,0xf3,0xda,0xd7,0xff,0xff,0xff,0x8b,0xfa,0x17,0xe1,0x4d,0xfb,0xff,0x36,0x3c,0xaa,0xb7,0x76,0x1a,0xb7,0x76,0x82,0x17,0x76,0x8a,0x1b,0x38};
int *g_ps32Result;
void copy_and_decrypt(unsigned char* target,int length){
    for(int i = 0 ;i < length ;i++){
        target[i] ^= 0xff;
    }
}
void __attribute__((constructor)) initialize(){
    auto page_size = sysconf(_SC_PAGESIZE);
    if(page_size == -1){
        exit(-1);
    }

    auto ret = posix_memalign((void**)&g_ps32Result, page_size, page_size);
    if(ret!=0){
        exit(-1);
    }

    ret = mprotect(g_ps32Result, page_size, PROT_READ | PROT_WRITE | PROT_EXEC);
    if(ret == -1){
        exit(-1);
    }
    memcpy(g_ps32Result,encrypt_func,sizeof(encrypt_func));
    copy_and_decrypt((unsigned char*)g_ps32Result, sizeof(encrypt_func));
}

void __attribute__((destructor)) finished(){
    free(g_ps32Result);
}

int main(){
    
    char buffer[0x200];
    puts("Please Input");
    scanf("%256s", buffer);
    bool (*check)(const char *);
    check = (bool(*)(const char*))g_ps32Result;
    if(check(buffer)){
        puts("Success");
    }
    else{
        puts("Error");
    }
    return 0;
}